version: "3.9"

services:
  dev:
    build:
      context: .devcontainer
    volumes:
      - .:/workspace:cached
    command: sleep infinity
    networks:
      - ragnet

  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ragnet

  qdrant:
    image: qdrant/qdrant:v1.11.0
    container_name: qdrant
    restart: unless-stopped
    ports:
      - "${QDRANT_PORT}:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ragnet

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s -u elastic:${ELASTIC_PASSWORD} http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"'"]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - ragnet

  redis:
    image: redis:7
    container_name: redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ragnet

  keycloak:
    image: quay.io/keycloak/keycloak:25.0
    container_name: keycloak
    restart: unless-stopped
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_PASSWORD}
    ports:
      - "${KEYCLOAK_PORT}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - ragnet

  api:
    build:
      context: ./backend
      dockerfile: api/Dockerfile
    container_name: api
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/healthz || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10
    networks: [ragnet]

  coordinator:
    build:
      context: ./backend
      dockerfile: coordinator/Dockerfile
    container_name: coordinator
    restart: unless-stopped
    ports:
      - "${COORDINATOR_PORT:-8001}:8001"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/healthz || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10
    networks: [ragnet]

  frontend:
    build: ./frontend
    container_name: frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT}:3000"
    depends_on:
      - api
    networks:
      - ragnet

volumes:
  postgres_data:
  qdrant_data:
  es_data:
  redis_data:

networks:
  ragnet:
    driver: bridge

